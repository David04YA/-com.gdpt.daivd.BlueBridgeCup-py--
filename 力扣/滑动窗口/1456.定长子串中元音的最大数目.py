# class Solution:
#     def maxVowels(self, s: str, k: int) -> int:
#         #定义一个临时变量，一个返回结果变量
#         res=temp=0
#         #定义好左端点和右端点，来实现滑动窗口
#         left = 0,right = k-1
#         for i in range len(s):
#             if s[left:right] 

# 滑动窗口的思路

# 初始化第一个窗口：首先，我们计算出第一个长度为 k 的窗口（也就是字符串 s 的前 k 个字符）中元音字母的数量。这个数量就是我们初始的最大值。
# 滑动窗口：然后，我们让这个窗口向右滑动，一次只移动一个位置。
# 高效更新：窗口每滑动一次，就意味着：
# 一个新字符进入了窗口（在窗口的右侧）。
# 一个旧字符离开了窗口（在窗口的左侧）。
# 更新计数：我们不需要重新计算整个新窗口的元音数。只需要在原来的计数值上：
# 如果新进入的字符是元音，计数加 1。
# 如果离开的旧字符是元音，计数减 1。
# 记录最大值：每次滑动后，我们都将当前的元音计数与已知的最大值进行比较，并随时更新最大值。
# 完成：当窗口滑动到字符串末尾时，我们就找到了最终的答案。

class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        #定义一个临时变量，一个返回结果变量
        res=temp=0
#         i 被赋值为当前字符的索引。
# c 被赋值为当前字符本身。
# 所以，变量 c 代表在每一次循环中，从字符串 s 中取出的那个字符。
        for i,c in enumerate(s):
#      enumerate() 方法用于将一个可遍历的数据对象（如列表、元组或字符串）组合为一个索引序列，同时列出数据和数据下标。

# 当你使用 for i, c in enumerate(s): 这样的语法时：

# s 是你要遍历的字符串（或列表等）。
# enumerate(s) 会在每次循环时，同时返回两个值：
# 当前元素的索引（index）
# 当前元素本身的值（value）
                if c in "aeiou":
                    emp += 1
                    left =  i-(k-1)
            # 最右边的刻度是 i。因为尺子总长是 k，所以从 i 这个位置向左移动 k-1 格，就应该能到达最左边的刻度left。
                if left<0:
                    continue
                ans=max(res,temp)
                if s[left] in "aeiou":
                    temp-= 1
        return res

    