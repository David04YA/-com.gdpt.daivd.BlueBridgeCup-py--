# 326. 3 的幂
# 已解答
# 简单
# 相关标签
# premium lock icon
# 相关企业
# 给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 true ；否则，返回 false 。

# 整数 n 是 3 的幂次方需满足：存在整数 x 使得 n == 3x

 

# 示例 1：

# 输入：n = 27
# 输出：true
# 示例 2：

# 输入：n = 0
# 输出：false
# 示例 3：

# 输入：n = 9
# 输出：true
# 示例 4：

# 输入：n = 45
# 输出：false
 

# 提示：

# -231 <= n <= 231 - 1
 

# 进阶：你能不使用循环或者递归来完成本题吗？


#思路：能被3取余为0的，一定是3的倍数，不一定是3的幂次方
        # 能被3整除为1的，一定是3的幂次方
        # 当不能被3取余为0时，是什么情况？——n<3时

# 作者：绝望之谷
# 链接：https://leetcode.cn/problems/power-of-three/solutions/3785446/du-li-si-kao-de-chu-by-jue-wang-zhi-gu-n-gv89/
# 来源：力扣（LeetCode）
# 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        #思路：能被3取余为0的，一定是3的倍数，不一定是3的幂次方
        # 能被3整除为1的，一定是3的幂次方
        # 当不能被3取余为0时，是什么情况？——n<3时
        if n <=0:
            return False
        while n%3==0:
            n//=3
        if n==1:
            return True
        else:
            return False
        


#  然而，对于“3的幂”问题，位运算或二进制的思路通常不适用。

# 为什么不行？
# 原因在于数字 3 在二进制表示中是 11，它不是一个像 2（二进制 10）那样“整洁”的基数。

# 我们来看看3的幂的二进制表示：

# 3¹ = 3 = 11
# 3² = 9 = 1001
# 3³ = 27 = 11011
# 3⁴ = 81 = 1010001
# 你会发现，3的幂在二进制表示下，1 的数量和位置并没有像2的幂那样简单明了的规律。因此，我们无法设计一